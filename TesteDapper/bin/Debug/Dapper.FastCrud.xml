<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.FastCrud</name>
    </assembly>
    <members>
        <member name="T:Dapper.FastCrud.Configuration.FakeEntity">
            <summary>
            Used in cases where we don't really need an entity, just a random SQL builder or a placeholder for legacy methods.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.OrmConventions">
            <summary>
            Default conventions used by the library.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.CreateEntityCollection(System.Object,System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Creates a new entity entity collection and attaches it to the provided entity instance.
            If null is returned, the operation is ignored.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.GetTableName(System.Type)">
            <summary>
            Resolves an entity type name into a sql table name. 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.GetSchemaName(System.Type)">
            <summary>
            Returns the schema name for an entity type. It can return null.
            In order for the schema to be used, you must also ensure that <see cref="P:Dapper.FastCrud.Configuration.SqlDatabaseOptions.IsUsingSchemas"/> for the dialect also returns <c>true</c>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.GetDatabaseName(System.Type)">
            <summary>
            Returns the database name for an entity type. It can return null.
            In order for the schema to be used, you must also ensure that <see cref="P:Dapper.FastCrud.Configuration.SqlDatabaseOptions.IsUsingSchemas"/> for the dialect also returns <c>true</c>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.GetDatabaseOptions(Dapper.FastCrud.SqlDialect)">
            <summary>
            Returns various database specific options to be used by the sql builder for the specified dialect.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.GetEntityProperties(System.Type)">
            <summary>
            Gets the entity properties mapped to database columns.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.ConfigureEntityPropertyMapping``1(Dapper.FastCrud.Mappings.PropertyMapping{``0})">
            <summary>
             Sets up an entity property mapping.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.GetEntityAttributes(System.Type)">
            <summary>
            Gets the attributes exposed directly on a type or indirectly through the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.GetEntityPropertyAttributes(System.Type,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the attributes exposed directly on a property on a type or indirectly through the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.IsSimpleSqlType(System.Type)">
            <summary>
            Return true if an entity property of the given type should be considered for a database mapping.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.ClearEntityToTableNameConversionRules">
            <summary>
            Clears all the entity to table name conventions.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.OrmConventions.AddEntityToTableNameConversionRule(System.String,System.String)">
            <summary>
            Adds a new rule used for converting an entity class name into a table name.
            The rule will be added with the highest priority.
            </summary>
            <param name="classNameRegex">The regex that will have to match the class name (e.g. "(buffal|tomat|volcan)o$" ) </param>
            <param name="sqlTableNameMatchReplacement">The match used to form the sql table name (e.g. "$1oes")</param>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.PropertyChangedNotifier">
            <summary>
            Helper class for property change notifications.
            </summary>
        </member>
        <member name="E:Dapper.FastCrud.Configuration.PropertyChangedNotifier.PropertyChanged">
            <summary>
                Multicast event for property change notifications.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.PropertyChangedNotifier.SetProperty``1(``0@,``0,System.String)">
            <summary>
                Checks if a property already matches a desired value.  Sets the property and
                notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">
                Name of the property used to notify listeners.  This
                value is optional and can be provided automatically when invoked from compilers that
                support CallerMemberName.
            </param>
            <returns>
                True if the value was changed, false if the existing value matched the
                desired value.
            </returns>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.PropertyChangedNotifier.OnPropertyChanged(System.String)">
            <summary>
                Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">
                Name of the property used to notify listeners.  This
                value is optional and can be provided automatically when invoked from compilers
                that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" />.
            </param>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.SqlDatabaseOptions">
            <summary>
            Stores database options linked to a particular dialect.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.SqlDatabaseOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.SqlDatabaseOptions.StartDelimiter">
            <summary>
            Gets the start delimiter used for SQL identifiers.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.SqlDatabaseOptions.EndDelimiter">
            <summary>
            Gets the end delimiter used for SQL identifiers.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.SqlDatabaseOptions.IsUsingSchemas">
            <summary>
            Gets a flag indicating the database is using schemas.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.SqlDatabaseOptions.ParameterPrefix">
            <summary>
            Gets the prefix used for named parameters
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.SqlDatabaseOptions.ParameterSuffix">
            <summary>
            Gets the suffix used for named parameters
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.SqlStatementOptions">
            <summary>
            Stores basic command options.
            This class can be inherited and set as default at <see cref="P:Dapper.FastCrud.OrmConfiguration.DefaultSqlStatementOptions"/>
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.SqlStatementOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.SqlStatementOptions.CommandTimeout">
            <summary>
            Gets a timeout for the command being executed.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions">
            <summary>
            Groups together all the statement options related to a joined entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.#ctor(Dapper.FastCrud.EntityDescriptors.EntityDescriptor)">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.JoinRelationships">
            <summary>
            Holds the relationships making up the JOIN.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.ReferencedEntityDescriptor">
            <summary>
            Returns the entity descriptor for the referenced entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.ReferencedEntityFormatterResolver">
            <summary>
            Returns the statement formatter attached to the JOINed entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.ReferencedEntityRegistration">
            <summary>
            When setting this value, you're overriding the default entity used for the entity.
            When an override is not set, the default registration is returned.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.ReferencedEntityAlias">
            <summary>
            An alias to be used for the referenced entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.JoinType">
            <summary>
            Gets or sets the SQL join type.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.JoinOnClause">
            <summary>
            Gets or sets the full ON clause in a JOIN.
            When not provided, the clause must be provided from the relationship mapping registrations.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.MapResults">
            <summary>
            If set tot true, mapping relationships will be set on the navigation properties.
            This flag can be overriden in a specific relationship by <seealso cref="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.MapResults"/>.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.ExtraWhereClause">
            <summary>
            Gets or sets an extra condition on the ON clause in a JOIN.
            For resolving the string, a formatter linked to the JOINed entity must be used.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions.ExtraOrderClause">
            <summary>
            Gets or sets an extra condition for the ORDER BY clause.
            For resolving the string, a formatter linked to the JOINed entity must be used.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions">
            <summary>
            Defines a relationship inside a JOIN.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.#ctor(Dapper.FastCrud.EntityDescriptors.EntityDescriptor)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencingEntityDescriptor">
            <summary>
            The referencing entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencingEntityAlias">
            <summary>
            The referencing entity alias.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencingNavigationProperty">
            <summary>
            The navigation property on the referencing entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencedNavigationProperty">
            <summary>
            The navigation property on the referenced property.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.MapResults">
            <summary>
            If set to true, the results are set on <see cref="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencingNavigationProperty"/> and <see cref="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencedNavigationProperty"/>.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions">
            <summary>
            Aggregates all the options passed on through the exposed extension methods.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.Joins">
            <summary>
            Gets the map of related entity types and their relationships.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.EntityDescriptor">
            <summary>
            Returns the entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.StatementFormatter">
            <summary>
            Returns the statement formatter. This is shared with all the related entities as well.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.MainEntityAlias">
            <summary>
            Gets or sets the main entity alias.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.MainEntityFormatterResolver">
            <summary>
            Returns the main statement formatter.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.Transaction">
            <summary>
            The transaction to be used by the statement.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.EntityRegistration">
            <summary>
            When setting this value, you're overriding the default entity used for the entity.
            When an override is not set, the default registration is returned.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.CommandTimeout">
            <summary>
            Gets a timeout for the command being executed.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.Parameters">
            <summary>
            Parameters used by the statement.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.WhereClause">
            <summary>
            Gets or sets a where clause.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.OrderClause">
            <summary>
            Gets or sets a where clause.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.LimitResults">
            <summary>
            Gets or sets a limit on the number of rows returned.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.SkipResults">
            <summary>
            Gets or sets a number of rows to be skipped.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions.ForceStreamResults">
            <summary>
            Gets or sets a flag indicating the results should be streamed.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2">
            <summary>
            The full options builder for JOINs.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.Builder">
            <summary>
            Provides the builder used in constructing the options.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.When(System.Boolean,System.Func{`1,`1},System.Func{`1,`1})">
            <summary>
            If <paramref name="condition"/> then <paramref name="then"/> else <paramref name="otherwise"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.WithEntityMappingOverride(Dapper.FastCrud.Mappings.EntityMapping{`0})">
            <summary>
            The entity mapping override to be used for the joined entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.WithAlias(System.String)">
            <summary>
            Sets up an alias for the referenced entity to be used in a relationship.
            It is recommended to add aliases to all entities as well.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.On(System.FormattableString)">
            <summary>
            Sets up the ON clause on the query. Remember to use the alias for the related entity in case it was set with <seealso cref="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.WithAlias(System.String)"/>.
            In case the relationship is already known through the mapping, calling this method will override the implicit SQL you'd normally get for the JOIN.
            However in this case it is recommended to use the final WHERE clause on the main query.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.Where(System.FormattableString)">
            <summary>
            Extra conditions to be used for the joined entity. These will be added to the main WHERE clause.
            The formatter used to resolve the formattable string defaults to the JOINed entity, hence all the single columns become fully qualified.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.OrderBy(System.FormattableString)">
            <summary>
            Adds an extra ORDER BY clause to the main statement.
            The formatter used to resolve the formattable string defaults to the JOINed entity, hence all the single columns become fully qualified.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.MapResults(System.Boolean)">
            <summary>
            If set tot true, mapping relationships will be set on the navigation properties.
            This flag can be overriden in a specific relationship by <seealso cref="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.MapResults"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.LeftOuterJoin">
            <summary>
            Sets the type of the JOIN to a LEFT OUTER JOIN.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.InnerJoin">
            <summary>
            Sets the type of the JOIN to an INNER JOIN.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinOptionsBuilder`2.Referencing``1(System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.ISqlJoinRelationshipOptionsBuilder{``0,`0}})">
            <summary>
            Specifies the referencing entity inside a relationships.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3">
            <summary>
            The full options builder for JOINs.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.Builder">
            <summary>
            Provides the builder used in constructing the options.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.When(System.Boolean,System.Func{`2,`2},System.Func{`2,`2})">
            <summary>
            If <paramref name="condition"/> then <paramref name="then"/> else <paramref name="otherwise"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.MapResults(System.Boolean)">
            <summary>
            If set to true, the results are set on <see cref="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencingNavigationProperty"/> and <see cref="P:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinRelationshipOptions.ReferencedNavigationProperty"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.FromAlias(System.String)">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.FromProperty(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.FromProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.ToProperty(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementJoinRelationshipOptionsBuilder`3.ToProperty(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2">
            <summary>
            The full options builder for main queries.
            Note that the publicly available builder will use a subset of this functionality and will vary depending on usage.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.Builder">
            <summary>
            Provides the builder used in constructing the options.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.Top(System.Nullable{System.Int64})">
            <summary>
            Limits the results set by the top number of records returned.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.WithAlias(System.String)">
            <summary>
            Sets up an alias for the main entity to be used in a relationship.
            It is recommended to add aliases to the joined entities as well.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.OrderBy(System.FormattableString)">
            <summary>
            Adds an ORDER BY clause to the statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.Skip(System.Nullable{System.Int64})">
            <summary>
            Skips the initial set of results.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.StreamResults(System.Boolean)">
            <summary>
            Causes the result set to be streamed.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.Where(System.FormattableString)">
            <summary>
            Limits the result set with a where clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.WithParameters(System.Object)">
            <summary>
            Sets the parameters to be used by the statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.When(System.Boolean,System.Func{`1,`1},System.Func{`1,`1})">
            <summary>
            If <paramref name="condition"/> then <paramref name="then"/> else <paramref name="otherwise"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.WithTimeout(System.Nullable{System.TimeSpan})">
            <summary>
            Enforces a maximum time span on the current command.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.AttachToTransaction(System.Data.IDbTransaction)">
            <summary>
            Attaches the current command to an existing transaction.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.WithEntityMappingOverride(Dapper.FastCrud.Mappings.EntityMapping{`0})">
            <summary>
            Overrides the entity mapping for the current statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.Builders.Aggregated.AggregatedSqlStatementOptionsBuilder`2.Include``1(System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.ISqlJoinOptionsBuilder{``0}})">
            <summary>
            Includes a referred entity into the query. The relationship and the associated mappings must be set up prior to calling this method.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalBulkSqlStatementOptionsBuilder`1">
            <summary>
            Conditional sql options builder for statements of type bulk delete/update.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.ConditionalBulkSqlStatementOptionsBuilder`1">
            <summary>
            Conditional sql options builder for statements of type bulk delete/update.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalSqlStatementOptionsBuilder`1">
            <summary>
            Statement sql options builder for a conditional statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.ConditionalSqlStatementOptionsBuilder`1">
            <summary>
            Statement sql options builder for a conditional statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.IRangedBatchSelectSqlSqlStatementOptionsOptionsBuilder`1">
            <summary>
            Ranged conditional sql options builder for a statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.RangedBatchSelectSqlSqlStatementOptionsOptionsBuilder`1">
            <summary>
            Ranged conditional sql options builder for a statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.ISelectSqlStatementOptionsBuilder`1">
            <summary>
            Single statement options builder for a single record select.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.SelectSqlStatementOptionsBuilder`1">
            <summary>
            Single statement options builder for a single record select.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.ISqlJoinOptionsBuilder`1">
            <summary>
            SQL statement options builder used in JOINs.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.SqlJoinOptionsBuilder`1">
            <summary>
            SQL statement options builder used in JOINs.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.ISqlJoinRelationshipOptionsBuilder`2">
            <summary>
            SQL statement options builder used in JOINs.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.SqlJoinRelationshipOptionsBuilder`2">
            <summary>
            SQL statement options builder used in JOIN relationships.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.IStandardSqlStatementOptionsBuilder`1">
            <summary>
            Standard sql options builder for a statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.Builders.StandardSqlStatementOptionsBuilder`1">
            <summary>
            Standard sql options builder for a statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.IConditionalSqlStatementOptionsOptionsSetter`2">
            <summary>
            Conditional sql statement options setter. 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IConditionalSqlStatementOptionsOptionsSetter`2.Where(System.FormattableString)">
            <summary>
            Limits the result set with a where clause.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.IParameterizedSqlStatementOptionsSetter`2">
            <summary>
            Parameterized SQL statement options setter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IParameterizedSqlStatementOptionsSetter`2.WithParameters(System.Object)">
            <summary>
            Sets the parameters to be used by the statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.IRangedConditionalSqlStatementOptionsSetter`2">
            <summary>
            Ranged conditional sql statement options setter. 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IRangedConditionalSqlStatementOptionsSetter`2.Top(System.Nullable{System.Int64})">
            <summary>
            Limits the results set by the top number of records returned.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IRangedConditionalSqlStatementOptionsSetter`2.OrderBy(System.FormattableString)">
            <summary>
            Adds an ORDER BY clause to the statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IRangedConditionalSqlStatementOptionsSetter`2.StreamResults(System.Boolean)">
            <summary>
            Causes the result set to be streamed.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IRangedConditionalSqlStatementOptionsSetter`2.Skip(System.Nullable{System.Int64})">
            <summary>
            Skips the initial set of results.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.IRelationalSqlStatementOptionsSetter`1">
            <summary>
            Statement options for entity relationships
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IRelationalSqlStatementOptionsSetter`1.WithAlias(System.String)">
            <summary>
            Sets up an alias for the main entity to be used in a relationship.
            It is recommended to add aliases to the joined entities as well.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IRelationalSqlStatementOptionsSetter`1.Include``1(System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.ISqlJoinOptionsBuilder{``0}})">
            <summary>
            Includes a referenced entity into the query.
            The referencing entity will tried to be inferred.
            If more than one relationship was found between one of the existing entities and <seealso cref="!:TReferencedEntity"/>, use the join relationship options to add more information to be used in locating the relationship.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2">
            <summary>
            Includes the set of options used in JOIN statements.
            </summary>
            <typeparam name="TReferencedEntity">Joined entity</typeparam>
            <typeparam name="TStatementOptionsBuilder">Options builder</typeparam>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.WithAlias(System.String)">
            <summary>
            Sets up an alias for the referenced entity to be used in a relationship.
            It is recommended to add aliases to all the entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.WithEntityMappingOverride(Dapper.FastCrud.Mappings.EntityMapping{`0})">
            <summary>
            Overrides the mapping for the entity participating in the JOIN.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.On(System.FormattableString)">
            <summary>
            Sets up the ON clause on the query.
            Remember to use aliases instead of the entities in case you called <seealso cref="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.WithAlias(System.String)"/>.
            In case the relationship is already known through the mapping, calling this method will override the implicit SQL ON clause you'd normally get automatically for the relationship.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.When(System.Boolean,System.Func{`1,`1},System.Func{`1,`1})">
            <summary>
            If <paramref name="condition"/> then <paramref name="then"/> else <paramref name="otherwise"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.Where(System.FormattableString)">
            <summary>
            Extra filter appended to the main WHERE clause.
            The formattable string is scoped on the referenced entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.OrderBy(System.FormattableString)">
            <summary>
            Extra ORDER BY clause to the main statement.
            The formattable string is scoped on the referenced entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.LeftOuterJoin">
            <summary>
            Sets the type of the JOIN to a LEFT OUTER JOIN.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.InnerJoin">
            <summary>
            Sets the type of the JOIN to an INNER JOIN.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.MapResults(System.Boolean)">
            <summary>
            If set tot true, mapping relationships will be set on the navigation properties.
            This flag can be overriden in a specific relationship by <seealso cref="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.MapResults(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinOptionsSetter`2.Referencing``1(System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.ISqlJoinRelationshipOptionsBuilder{``0,`0}})">
            <summary>
            Provides information about the referencing entity participating in the JOIN.
            Multiple calls can be made to this method to add more links between other entities and the current one.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3">
            <summary>
            Includes the set of options used in JOIN statements.
            </summary>
            <typeparam name="TReferencedEntity">The referenced entity</typeparam>
            <typeparam name="TReferencingEntity">The referencing entity</typeparam>
            <typeparam name="TStatementOptionsBuilder">Options builder</typeparam>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.MapResults(System.Boolean)">
            <summary>
            If set to true, the results are set on <see cref="!:FromProperty(Expression?)"/> and <see cref="!:ToProperty(Expression?)"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.FromAlias(System.String)">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.FromProperty(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.FromProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.ToProperty(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.ToProperty(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})">
            <summary>
            Provides more information about the relationship between the two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.ISqJoinRelationshipOptionsSetter`3.When(System.Boolean,System.Func{`2,`2},System.Func{`2,`2})">
            <summary>
            If <paramref name="condition"/> then <paramref name="then"/> else <paramref name="otherwise"/>.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.IStandardSqlStatementOptionsSetter`2">
            <summary>
            Standard sql options setter for a statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IStandardSqlStatementOptionsSetter`2.WithTimeout(System.Nullable{System.TimeSpan})">
            <summary>
            Enforces a maximum time span on the current command.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IStandardSqlStatementOptionsSetter`2.AttachToTransaction(System.Data.IDbTransaction)">
            <summary>
            Attaches the current command to an existing transaction.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IStandardSqlStatementOptionsSetter`2.WithEntityMappingOverride(Dapper.FastCrud.Mappings.EntityMapping{`0})">
            <summary>
            Overrides the entity mapping for the current statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Configuration.StatementOptions.IStandardSqlStatementOptionsSetter`2.When(System.Boolean,System.Func{`1,`1},System.Func{`1,`1})">
            <summary>
            If <paramref name="condition"/> then <paramref name="then"/> else <paramref name="otherwise"/>.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Configuration.StatementOptions.SqlJoinType">
            <summary>
            Specifies the type of join
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Configuration.StatementOptions.SqlJoinType.NotSpecified">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Configuration.StatementOptions.SqlJoinType.LeftOuterJoin">
            <summary>
            Left outer join
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Configuration.StatementOptions.SqlJoinType.InnerJoin">
            <summary>
            Inner join
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.OrmConfiguration">
            <summary>
            Sets up various FastCrud settings.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.OrmConfiguration.DefaultSqlStatementOptions">
            <summary>
            Gets the default command options. 
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.OrmConfiguration.DefaultDialect">
            <summary>
            Gets or sets the default dialect. 
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.OrmConfiguration.Conventions">
            <summary>
            Gets or sets the conventions used by the library. Subclass <see cref="T:Dapper.FastCrud.Configuration.OrmConventions"/> to provide your own set of conventions.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.OrmConfiguration.ClearEntityRegistrations">
            <summary>
            Clears all the recorded entity registrations and entity ORM mappings.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.OrmConfiguration.GetDefaultEntityMapping``1">
            <summary>
            Returns the default entity mapping for an entity.
            This was either previously set by you in a call to <see cref="M:Dapper.FastCrud.OrmConfiguration.SetDefaultEntityMapping``1(Dapper.FastCrud.Mappings.EntityMapping{``0})"/> or it was auto-generated by the library.
            
            You can use the returned mappings to create new temporary mappings for the query calls or to override the defaults.
            Once the mappings have been used in query calls, the instance will be frozen and it won't support further modifications, but you can always call <see cref="M:Dapper.FastCrud.Mappings.EntityMapping`1.Clone"/> to create a new instance.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Dapper.FastCrud.OrmConfiguration.RegisterEntity``1">
            <summary>
            Registers a new entity. Please continue setting up property mappings and other entity options with the returned default entity mapping instance.
            Remember that multiple instances of mappings for a single entity can be active at any time for a single entity type,
            but also multiple entities pointing to the same database table having different mappings.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Dapper.FastCrud.OrmConfiguration.SetDefaultEntityMapping``1(Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Sets the default entity type mapping for the entity type.
            This must be called before any query operations were made on the entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Dapper.FastCrud.OrmConfiguration.GetSqlBuilder``1(Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns an SQL builder helpful for constructing verbatim SQL queries.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entityMapping">If NULL, de default entity mapping will be used.</param>
        </member>
        <member name="T:Dapper.FastCrud.SqlDialect">
            <summary>
            SQL dialect enumeration
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.SqlDialect.MsSql">
            <summary>
            MS SQL Server
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.SqlDialect.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.SqlDialect.SqLite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.SqlDialect.PostgreSql">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.SqlDialect.SqlAnywhere">
            <summary>
            SAP/Sybase Anywhere SQL
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.DapperExtensions">
            <summary>
            Class for Dapper extensions
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.Get``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.ISelectSqlStatementOptionsBuilder{``0}})">
            <summary>
            Queries the database for a single record based on its primary keys.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="connection">Database connection.</param>
            <param name="entityKeys">The entity from which the primary keys will be extracted and used for filtering.</param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.GetAsync``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.ISelectSqlStatementOptionsBuilder{``0}})">
            <summary>
            Queries the database for a single record based on its primary keys.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="connection">Database connection.</param>
            <param name="entityKeys">The entity from which the primary keys will be extracted and used for filtering.</param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>Returns a single entity by a single id from table or NULL if none could be found.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.Insert``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IStandardSqlStatementOptionsBuilder{``0}})">
            <summary>
            Inserts a row into the database, updating its properties based on the database generated fields.
            </summary>
            <param name="connection"></param>
            <param name="entityToInsert"></param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.InsertAsync``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IStandardSqlStatementOptionsBuilder{``0}})">
            <summary>
            Inserts a row into the database.
            </summary>
            <param name="connection"></param>
            <param name="entityToInsert"></param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.Update``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IStandardSqlStatementOptionsBuilder{``0}})">
            <summary>
            Updates a record in the database.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="entityToUpdate">The entity you wish to update.</param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>True if the item was updated.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.UpdateAsync``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IStandardSqlStatementOptionsBuilder{``0}})">
            <summary>
            Updates a record in the database.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="entityToUpdate">
            The entity you wish to update.
            For partial updates use an entity mapping override.
            </param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>True if the item was updated.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.BulkUpdate``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalBulkSqlStatementOptionsBuilder{``0}})">
            <summary>
            Updates a number of records in the database.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="updateData">
            The data used to update the records. 
            The primary keys will be ignored.
            For partial updates use an entity mapping override.
            </param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The number of records updated.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.BulkUpdateAsync``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalBulkSqlStatementOptionsBuilder{``0}})">
            <summary>
            Updates a number of records in the database.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="updateData">
            The data used to update the records. 
            The primary keys will be ignored.
            For partial updates use an entity mapping override.
            </param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The number of records updated.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.Delete``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IStandardSqlStatementOptionsBuilder{``0}})">
            <summary>
            Deletes an entity by its primary keys.
            </summary>
            <typeparam name="TEntity">Entity Type</typeparam>
            <param name="connection">Database connection.</param>
            <param name="entityToDelete">The entity you wish to remove.</param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>True if the entity was found and successfully deleted.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.DeleteAsync``1(System.Data.IDbConnection,``0,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IStandardSqlStatementOptionsBuilder{``0}})">
            <summary>
            Deletes an entity by its primary keys.
            </summary>
            <typeparam name="TEntity">Entity Type</typeparam>
            <param name="connection">Database connection.</param>
            <param name="entityToDelete">The entity you wish to remove.</param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>True if the entity was found and successfully deleted.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.BulkDelete``1(System.Data.IDbConnection,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalBulkSqlStatementOptionsBuilder{``0}})">
            <summary>
            Deletes all the records in the table or a range of records if a conditional clause was set up in the statement options.
            </summary>
            <typeparam name="TEntity">Entity Type</typeparam>
            <param name="connection">Database connection.</param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The number of records deleted.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.BulkDeleteAsync``1(System.Data.IDbConnection,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalBulkSqlStatementOptionsBuilder{``0}})">
            <summary>
            Deletes all the records in the table or a range of records if a conditional clause was set up in the statement options.
            </summary>
            <typeparam name="TEntity">Entity Type</typeparam>
            <param name="connection">Database connection.</param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The number of records deleted.</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.Count``1(System.Data.IDbConnection,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalSqlStatementOptionsBuilder{``0}})">
            <summary>
            Counts all the records in a table or a range of records if a conditional clause was set up in the statement options.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="connection"></param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The record count</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.CountAsync``1(System.Data.IDbConnection,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IConditionalSqlStatementOptionsBuilder{``0}})">
            <summary>
            Counts all the records in a table or a range of records if a conditional clause was set up in the statement options.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="connection"></param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The record count</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.Find``1(System.Data.IDbConnection,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IRangedBatchSelectSqlSqlStatementOptionsOptionsBuilder{``0}})">
            <summary>
            Queries the database for a set of records.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="connection"></param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The record count</returns>
        </member>
        <member name="M:Dapper.FastCrud.DapperExtensions.FindAsync``1(System.Data.IDbConnection,System.Action{Dapper.FastCrud.Configuration.StatementOptions.Builders.IRangedBatchSelectSqlSqlStatementOptionsOptionsBuilder{``0}})">
            <summary>
            Queries the database for a set of records.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="connection"></param>
            <param name="statementOptions">Optional statement options (usage: statement => statement.SetTimeout().AttachToTransaction()...)</param>
            <returns>The record count</returns>
        </member>
        <member name="T:Dapper.FastCrud.EntityDescriptors.EntityDescriptor`1">
            <summary>
            Typed entity descriptor, capable of producing statement builders associated with default entity mappings.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.EntityDescriptors.EntityDescriptor`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.EntityDescriptors.EntityDescriptor`1.GetSqlStatements(Dapper.FastCrud.Mappings.Registrations.EntityRegistration)">
            <summary>
            Returns the sql statements for a single entity, attached to the default entity registration or an overriden entity registration if provided.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.EntityDescriptors.EntityDescriptor`1.DefaultEntityMappingRegistration">
            <summary>
            Returns the default entity mapping registration.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.EntityDescriptors.EntityDescriptor">
            <summary>
            Basic entity descriptor, holding entity mappings for a specific entity type.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.EntityDescriptors.EntityDescriptor.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.EntityDescriptors.EntityDescriptor.CurrentEntityMappingRegistration">
            <summary>
            Returns the current entity mapping registration.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.EntityDescriptors.EntityDescriptor.EntityType">
            <summary>
            Gets the associated entity type.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.EntityDescriptors.EntityDescriptor.DefaultEntityMappingRegistration">
            <summary>
            Returns the default entity mapping registration.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.EntityDescriptors.EntityDescriptor.GetSqlBuilder(Dapper.FastCrud.Mappings.Registrations.EntityRegistration)">
            <summary>
            Returns the sql builder for an entity mapping, or the current one if the argument is null.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.EntityDescriptors.EntityDescriptor.GetSqlStatements(Dapper.FastCrud.Mappings.Registrations.EntityRegistration)">
            <summary>
            Returns the sql statements for a single entity, attached to the default entity registration or an overriden entity registration if provided.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Extensions.CommonExtensions">
            <summary>
            A set of commonly used extensions.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Extensions.CommonExtensions.GetPropertyDescriptor``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the property descriptor from a member expression.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Extensions.CommonExtensions.GetEntityType(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the entity type from a property denoting an entity or a collection of entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Extensions.CommonExtensions.IsEntityCollectionProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns true if the property represents a collection of entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Extensions.CommonExtensions.CombineHash(System.Int32,System.Nullable{System.Int32}[])">
            <summary>
            Combines a hash with other hashes
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver">
            <summary>
            Holds information about an entity participating in a statement.
            A resolver mainly identifies itself with the alias, but it can also identify itself by type name (and table name in case the table and the type names are different)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver.#ctor(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver.EntityDescriptor">
            <summary>
            The entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver.EntityRegistration">
            <summary>
            The entity registration.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver.SqlBuilder">
            <summary>
            The associated SQL builder.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver.Alias">
            <summary>
            The alias as it was assigned for the statement formatter.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolverMap">
            <summary>
            Holds a map of active resolvers.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolverMap.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolverMap.GetAllFormatterResolversExcluding(Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver[])">
            <summary>
            Gets all the formatters registered, excluding the set provided.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolverMap.LocateResolver(System.Type,System.String)">
            <summary>
            Locates a resolver. In case it can't be found, it will throw an exception.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolverMap.RemoveResolver(Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String)">
            <summary>
            Removes a resolver from the map.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolverMap.AddResolver(Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver)">
            <summary>
            Adds a new resolver to the map.
            </summary>
            <exception cref="T:System.InvalidOperationException">A resolver with the same alias/table/entity already exists. A unique alias must be provided.</exception>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolverMap.Item(System.String)">
            <summary>
            Resolves a formatter.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.FormatSpecifiers">
            <summary>
            Holds all the format specifiers supported by the library.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.Formattables.Formattable">
            <summary>
            A formattable that can be used straight in the formattable strings representing various clauses in Dapper.FastCrud.
            It can also be used on its own through <seealso cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> or <seealso cref="M:Dapper.FastCrud.Formatters.Formattables.Formattable.ToString(System.String,System.IFormatProvider)"/>.
            For more information, check the method that was used to create it in <seealso cref="T:Dapper.FastCrud.Sql"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.Formattable.ToString(System.String,System.IFormatProvider)">
            <summary>
            Applies formatting to the current instance.
            For more information, check the method that was used to create it in <seealso cref="T:Dapper.FastCrud.Sql"/>.
            </summary>
            <param name="format"> An optional format specifier.</param>
            <param name="formatProvider">The provider to use to format the value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.Formattable.ToString">
            <summary>
            Returns the raw representation of the object, which is not SQL ready.
            Depending on the usage, this can be the name of the resolved table, column, alias, identifier or parameter.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.Formattables.FormattableEntity">
            <summary>
            A formattable representing a database entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableEntity.#ctor(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableEntity.EntityRegistrationOverride">
            <summary>
            An optional entity registration override.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableEntity.Alias">
            <summary>
            An optional alias.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableEntity.EntityDescriptor">
            <summary>
            The entity type
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableEntity.LegacyDefaultFormatSpecifierOutsideOurFormatter">
            <summary>
            The default format specifier to use when running outside of our own formatter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableEntity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Applies formatting to the current instance. For more information, see <seealso cref="M:Dapper.FastCrud.Sql.Entity``1(System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})"/>.
            </summary>
            <param name="format"> An optional format specifier.</param>
            <param name="formatProvider">The provider to use to format the value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.Formattables.FormattableEntityProperty">
            <summary>
            A formattable representing a property on a database entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableEntityProperty.#ctor(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableEntityProperty.PropertyName">
            <summary>
            Represents a property name.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableEntityProperty.ToString(System.String,System.IFormatProvider)">
            <summary>
            Applies formatting to the current instance. For more information, see <seealso cref="M:Dapper.FastCrud.Sql.Entity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})"/>.
            </summary>
            <param name="format"> An optional format specifier.</param>
            <param name="formatProvider">The provider to use to format the value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.Formattables.FormattableIdentifier">
            <summary>
            Formattable identifier.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableIdentifier.#ctor(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableIdentifier.EntityDescriptor">
            <summary>
            Entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableIdentifier.EntityRegistrationOverride">
            <summary>
            An optional entity registration override.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableIdentifier.Identifier">
            <summary>
            The provided identifier.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableIdentifier.ToString(System.String,System.IFormatProvider)">
            <summary>
            Applies formatting to the current instance. For more information, see <seealso cref="M:Dapper.FastCrud.Sql.Identifier(System.String)"/>.
            </summary>
            <param name="format"> An optional format specifier.</param>
            <param name="formatProvider">The provider to use to format the value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.Formattables.FormattableParameter">
            <summary>
            Formattable parameter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableParameter.#ctor(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableParameter.EntityDescriptor">
            <summary>
            Entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableParameter.EntityRegistrationOverride">
            <summary>
            An optional entity registration override.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.Formattables.FormattableParameter.Parameter">
            <summary>
            The provided identifier.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.Formattables.FormattableParameter.ToString(System.String,System.IFormatProvider)">
            <summary>
            Applies formatting to the current instance. For more information, see <seealso cref="M:Dapper.FastCrud.Sql.Parameter(System.String)"/>.
            </summary>
            <param name="format"> An optional format specifier.</param>
            <param name="formatProvider">The provider to use to format the value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter">
            <summary>
            The central point for all the formatting capabilities.
            Only one instance exists for the duration of a statement.
            Every participant in the statement, including the main entity, will register themselves with the formatter and receive a unique resolver.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.ReplaceRegisteredResolver(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String)">
            <summary>
            Replaces one resolver with another. Note that this won't affect the active resolver.
            <exception cref="T:System.InvalidOperationException">The old registration could not be found or the new one is invalid.</exception>
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.LocateResolver(System.Type,System.String)">
            <summary>
            Locates a resolver.
            <exception cref="T:System.InvalidOperationException">The resolver could not be located.</exception>
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.RegisterResolver(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String)">
            <summary>
            Registers a new resolver. Note that this is not gonna replace the existing active main resolver. 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.GetAllFormatterResolversExcluding(Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver[])">
            <summary>
            Gets all the formatters registered, excluding the set provided.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.SetActiveMainResolver(Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver,System.Boolean)">
            <summary>
            Sets the main resolver used for incomplete column resolutions.
            The resolver MUST be registered first with <seealso cref="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.RegisterResolver(Dapper.FastCrud.EntityDescriptors.EntityDescriptor,Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.String)"/>.
            Call the result's <seealso cref="M:System.IDisposable.Dispose"/> to restore the previous main resolver.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.GetFormat(System.Type)">
            <summary>Returns an object that provides formatting services for the specified type.</summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.MainActiveResolver">
            <summary>
            Gets the currently active resolver.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.ForceFullyQualifiedColumns">
            <summary>
            If true, simple column names will never show up in the formatted string.
            They will always be prepended with the table name or alias.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.ParseFormat(System.String,System.String@,System.String@)">
            <summary>
            Resolves a format that might contain alias information.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.FormatParameter(System.String)">
            <summary>
            Formats a regular parameter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.FormatIdentifier(System.String)">
            <summary>
            Formats an identifier.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.FormatColumn(System.String)">
            <summary>
            Formats a column in the context of the current resolver.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.FormatTypeOrAliasOrNothing(System.String)">
            <summary>
            Formats an alias.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter.FormatQualifiedColumn(System.String,System.String)">
            <summary>
            Formats an aliased qualified column, or in case the alias is not provided, the currently active resolver's table or alias.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.AutoGeneratedEntityMapping`1">
            <summary>
            Discovers the orm mapping for a particular entity type.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.AutoGeneratedEntityMapping`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.AutoGeneratedEntityMapping`1.AutoGeneratedRegistration">
            <summary>
            Returns the auto-generated mapping registration
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.AutoGeneratedEntityMapping`1.DiscoverChildParentRelationships(System.Type)">
            <summary>
            Not assuming entities got registered, attempts to discover child-parent relationships.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.AutoGeneratedEntityMapping`1.DiscoverParentChildrenRelationships(System.Type)">
            <summary>
            Not assuming entities got registered, attempts to discover parent-children relationships.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.EntityMapping`1">
            <summary>
            Used to easily register entities.
            Multiple instances of mappings for a single entity can be active at any time for a single entity type,
            but also multiple entities pointing to the same database table having different mappings.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.#ctor(Dapper.FastCrud.Mappings.Registrations.EntityRegistration)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.EntityMapping`1.Registration">
            <summary>
            Returns the underlying entity registration.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetTableName(System.String)">
            <summary>
            Sets the database table associated with your entity.
            </summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetSchemaName(System.String)">
            <summary>
            Sets or resets the database schema associated with your entity.
            </summary>
            <param name="schemaName">Schema name</param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetDatabaseName(System.String)">
            <summary>
            Sets or resets the database associated with your entity.
            </summary>
            <param name="databaseName">Database name</param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetDialect(Dapper.FastCrud.SqlDialect)">
            <summary>
            You can override the default dialect used for the schema.
            However, if plan on using the same dialect for all your db operations, it's best to use <see cref="P:Dapper.FastCrud.OrmConfiguration.DefaultDialect"/> instead.
            </summary>
            <param name="dialect">Sql dialect</param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers a regular property.
            </summary>
            <param name="property">Name of the property (e.g. user => user.LastName ) </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Dapper.FastCrud.Mappings.PropertyMapping{`0}})">
            <summary>
            Sets the mapping options for a property.
            </summary>
            <param name="property">Name of the property (e.g. user => user.LastName ) </param>
            <param name="propertySetupFct">A callback which will be called for setting up the property mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.GetProperties(Dapper.FastCrud.Mappings.PropertyMappingOptions[])">
            <summary>
            Returns all the property mappings, optionally filtered by their options.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.UpdateProperties(System.Action{Dapper.FastCrud.Mappings.PropertyMapping{`0}},Dapper.FastCrud.Mappings.PropertyMappingOptions[])">
            <summary>
            Gives an option for updating all the property mappings, optionally filtered by their options.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.GetPropertiesExcluding(Dapper.FastCrud.Mappings.PropertyMappingOptions[])">
            <summary>
            Returns all the property mappings, filtered by an exclusion filter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.UpdatePropertiesExcluding(System.Action{Dapper.FastCrud.Mappings.PropertyMapping{`0}},Dapper.FastCrud.Mappings.PropertyMappingOptions[])">
            <summary>
            Gives an option for updating all the property mappings, filtered by an exclusion filter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.GetPropertiesExcluding(System.String[])">
            <summary>
            Returns all the property mappings, filtered by an exclusion filter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.UpdatePropertiesExcluding(System.Action{Dapper.FastCrud.Mappings.PropertyMapping{`0}},System.String[])">
            <summary>
            Returns all the property mappings, filtered by an exclusion filter.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.GetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns property mapping information for a particular property.
            </summary>
            <param name="property">Name of the property (e.g. user => user.LastName ) </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.GetProperty(System.String)">
            <summary>
            Returns property mapping information for a particular property.
            </summary>
            <param name="propertyName">Name of the property (e.g. nameof(User.Name) ) </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.RemoveProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes the mapping for a property.
            </summary>
            <param name="property">Name of the property (e.g. user => user.LastName ) </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.RemoveProperty(System.String[])">
            <summary>
            Removes the mapping for a property.
            </summary>
            <param name="propertyName">Name of the property (e.g. nameof(User.Name) ) </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.RemoveAllPropertiesExcluding(System.String[])">
            <summary>
            Removes all the property mappings with the exception of the provided list.
            </summary>
            <param name="propertyName">Name of the property (e.g. nameof(User.Name) ) </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetParentChildrenRelationship``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Sets a parent-child relationship when a navigation property is present.
            </summary>
            <param name="referencingChildrenNavigationProperty">
             The property holding the children entities.
             <br/>
            <code>
            Example:
             .SetParentChildrenRelationship(teacher => teacher.OnlineCourses, course => course.OnlineTeacherId)
            
            public class Course (TChildEntity)
               {
                   public int CourseId { get; set; }
                   public string CourseName { get; set; }
                   public string Description { get; set; }
                   public int OnlineTeacherId { get;set; }
                   public Teacher OnlineTeacher { get; set; }
                   public int ClassRoomTeacherId { get;set; } 
                   public Teacher ClassRoomTeacher { get; set; }
               }
            public class Teacher (TEntity, current)
               {
                   public int TeacherId { get; set; }
                   public string Name { get; set; }
                   public IEnumerable&lt;Course&gt; OnlineCourses { get; set; } &lt;--
                   public IEnumerable&lt;Course&gt; ClassRoomCourses { get; set; }
               }
            </code>
            </param>
            <param name="referencedChildrenColumnProperties">
             The property or properties representing the columns on the referenced entity which represent the foreign key(s).
            <br/>
            <code>
            Example:
             .SetParentChildrenRelationship(teacher => teacher.OnlineCourses, course => course.OnlineTeacherId)
            
            public class Course (TChildEntity)
               {
                   public int CourseId { get; set; }
                   public string CourseName { get; set; }
                   public string Description { get; set; }
                   public int OnlineTeacherId { get;set; } &lt;--
                   public Teacher OnlineTeacher { get; set; }
                   public int ClassRoomTeacherId { get;set; }
                   public Teacher ClassRoomTeacher { get; set; }
               }
            public class Teacher (TEntity, current)
               {
                   public int TeacherId { get; set; }
                   public string Name { get; set; }
                   public IEnumerable&lt;Course&gt; OnlineCourses { get; set; }
                   public IEnumerable&lt;Course&gt; ClassRoomCourses { get; set; }
               }
            </code>
            </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetParentChildRelationship``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Sets a parent-child in a one-to-one relationship when a navigation property is present.
            </summary>
            <param name="referencingChildrenNavigationProperty">
             The property holding the child entity.
             <br/>
            <code>
            Example:
             .SetParentChildrenRelationship(teacher => teacher.TeacherBadge, badge => badge.TeacherId)
            
            public class Badge (TChildEntity)
               {
                   public int BadgeId {get; set;}
                   public int TeacherId { get;set; }
                   public Teacher Teacher { get; set; }
               }
            public class Teacher (TEntity, current)
               {
                   public int TeacherId { get; set; }
                   public string Name { get; set; }
                   public Badge TeacherBadge { get; set; } &lt;--
               }
            </code>
            </param>
            <param name="referencedChildrenColumnProperties">
             The property or properties representing the columns on the referenced entity which represent the foreign key(s).
            <br/>
            <code>
            Example:
             .SetParentChildrenRelationship(teacher => teacher.TeacherBadge, badge => badge.TeacherId)
            
            public class Badge (TChildEntity)
               {
                   public int BadgeId {get; set;}
                   public int TeacherId { get;set; } &lt;-
                   public Teacher Teacher { get; set; }
               }
            public class Teacher (TEntity, current)
               {
                   public int TeacherId { get; set; }
                   public string Name { get; set; }
                   public IEnumerable&lt;Course&gt; OnlineCourses { get; set; }
                   public IEnumerable&lt;Course&gt; ClassRoomCourses { get; set; }
               }
            </code>
            </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetParentChildrenRelationship``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Sets a parent-child relationship when a navigation property is not present.
            </summary>
            <param name="referencedChildrenColumnProperties">
             The property or properties representing the columns on the referenced entity which represent the foreign key(s).
             <br/>
            <code>
            Example:
             .SetParentChildrenRelationship&lt;Course&gt;(course => course.OnlineTeacherId)
            
            public class Course (TChildEntity)
               {
                   public int CourseId { get; set; }
                   public string CourseName { get; set; }
                   public string Description { get; set; }
                   public int OnlineTeacherId { get;set; } &lt;--
                   public int ClassRoomTeacherId { get;set; }
               }
            public class Teacher (TEntity, current)
               {
                   public int TeacherId { get; set; }
                   public string Name { get; set; }
               }
            </code>
            </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetChildParentRelationship``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Sets a child-parent relationship when a navigation property is present.
            </summary>
            <param name="referencingParentNavigationProperty">
             The property holding the parent entity.
            <br/>
            <code>
            Example:
             .SetChildParentRelationship(course -> course.OnlineTeacher, course => course.OnlineTeacherId)
            
            public class Course
               {
                   public int CourseId { get; set; }
                   public string CourseName { get; set; }
                   public string Description { get; set; }
                   public int OnlineTeacherId { get;set; } 
                   public Teacher OnlineTeacher { get; set; } &lt;--
                   public int ClassRoomTeacherId { get;set; } 
                   public Teacher ClassRoomTeacher { get; set; }
               }
            </code>
            </param>
            <param name="referencingColumnProperties">
             The property or properties representing the columns on the current entity that are used as foreign keys to the parent entity.
            <br/>
            <code>
            Example:
             .SetChildParentRelationship(course -> course.OnlineTeacher, course => course.OnlineTeacherId)
            
            public class Course
               {
                   public int CourseId { get; set; }
                   public string CourseName { get; set; }
                   public string Description { get; set; }
                   public int OnlineTeacherId { get;set; } &lt;--
                   public Teacher OnlineTeacher { get; set; }
                   public int ClassRoomTeacherId { get;set; }
                   public Teacher ClassRoomTeacher { get; set; }
               }
            </code>
            </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.SetChildParentRelationship``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Sets a child-parent relationship when a navigation property is not present.
            </summary>
            <param name="referencingColumnProperties">
             The property or properties representing the columns on the referenced entity which represent the foreign key(s).
            <code>
            Example:
            Example:
             .SetChildParentRelationship(course => course.OnlineTeacherId)
            
            public class Course
               {
                   public int CourseId { get; set; }
                   public string CourseName { get; set; }
                   public string Description { get; set; }
                   public int OnlineTeacherId { get;set; } &lt;--
                   public int ClassRoomTeacherId { get;set; }
               }
            </code>
            </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.RemoveAllRelationships">
            <summary>
            Removes all relationships
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.RemoveParentChildrenRelationship``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Removes a specific parent-children relationship.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.RemoveParentChildRelationship``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Removes a specific parent-child relationship.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.RemoveChildParentRelationship``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Removes a specific child-parent relationship.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.EntityMapping`1.Clone">
            <summary>
            Clones the current mapping set, allowing for further modifications.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.PropertyMapping`1">
            <summary>
            Used to easily set up mappings for entity properties.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.#ctor(Dapper.FastCrud.Mappings.Registrations.PropertyRegistration)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.PropertyMapping`1.Registration">
            <summary>
            Gets the underlying property registration.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.PropertyMapping`1.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.SetPrimaryKey(System.Boolean)">
            <summary>
            Marks the property as primary key.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.SetDatabaseColumnName(System.String)">
            <summary>
            Sets the database column name.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.SetDatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
            <summary>
            Indicates that the property is mapped to a database generated field.
            This does not cover default values generated by the database (please use <see cref="M:Dapper.FastCrud.Mappings.PropertyMapping`1.ExcludeFromInserts"/> and <see cref="M:Dapper.FastCrud.Mappings.PropertyMapping`1.RefreshOnInserts(System.Boolean)"/> for this scenario).
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.SetColumnOrder(System.Int32)">
            <summary>
            Sets the column order, normally used for matching foreign keys with the primary composite keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.RefreshOnInserts(System.Boolean)">
            <summary>
            Indicates that the property gets refreshed on INSERTs.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.RefreshOnUpdates(System.Boolean)">
            <summary>
            Indicates that the property gets refreshed on UPDATEs.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.IncludeInInserts(System.Boolean)">
            <summary>
            The property will be included in insert operations.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.IncludeInUpdates(System.Boolean)">
            <summary>
            The property will be included in update operations.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.PropertyMapping`1.Remove">
            <summary>
            Removes the current property mapping.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.PropertyMappingOptions">
            <summary>
            Property mapping options
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.PropertyMappingOptions.None">
            <summary>
            Identifies a regular property. 
            The property will be used in operations such as <c>Insert</c> and <c>Update</c>.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.PropertyMappingOptions.KeyProperty">
            <summary>
            Key properties are used to identify the attached record in the database. 
            You are not restricted in having only one key property, as many databases accept composite keys.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.PropertyMappingOptions.ExcludedFromUpdates">
            <summary>
            Useful for partial updates, a property marked with this option will be excluded from any <c>Update</c> operations.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.PropertyMappingOptions.ExcludedFromInserts">
            <summary>
            Useful for partial updates and identity columns, a property marked with this option will be excluded from any <c>Insert</c> operations.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.PropertyMappingOptions.RefreshPropertyOnInserts">
            <summary>
            The value is not going to be re-read from the database on INSERTs.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.PropertyMappingOptions.RefreshPropertyOnUpdates">
            <summary>
            The value is not going to be re-read from the database on UPDATEs.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.Registrations.EntityRegistration">
            <summary>
            Holds information about table mapped properties for a particular entity type.
            Multiple instances of such mappings can be active for a single entity type.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.TableName">
            <summary>
            The table associated with the entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.SchemaName">
            <summary>
            The schema associated with the entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.DatabaseName">
            <summary>
            The database associated with the entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.Dialect">
            <summary>
            Current Sql dialect in use for the current entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.IsFrozen">
            <summary>
            If the entity mapping was already registered, this flag will return true. You can have multiple mappings which can be obtained by cloning this instance.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.EntityType">
            <summary>
            Entity type.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.SetRelationship(Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType,System.Type,System.String[],System.String[],System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds a new entity relationship or updates an existing one.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.RemoveAllRelationships">
            <summary>
            Removes all relationships.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.RemoveRelationship(System.Type,System.Nullable{Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType},System.String[],System.String[],System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes an existing relationship.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to locate the requested relationship.</exception>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.RemoveProperties(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Removes a set of property mappings.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.RemoveProperty(System.String)">
            <summary>
            Removes a property mapping.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when no properties having the name were found</exception>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.SetProperty(System.String)">
            <summary>
            Prepares a new property mapping. 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.SetProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Registers a property mapping. 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.SetProperty(Dapper.FastCrud.Mappings.Registrations.PropertyRegistration)">
            <summary>
            Registers a property mapping.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.Clone">
            <summary>
            Clones the current mapping set, allowing for further modifications.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.GetAllPropertyRegistrationsBeforeFreezing">
            <summary>
            Gets the frozen property registration, before the entity mapping gets frozen.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.GetAllOrderedFrozenPropertyRegistrations">
            <summary>
            Gets the frozen property registration, ordered by <seealso cref="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.ColumnOrder"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.GetAllOrderedFrozenPrimaryKeyRegistrations">
            <summary>
            Gets the frozen primary key property registration, ordered by <seealso cref="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.ColumnOrder"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.GetOrThrowFrozenPropertyRegistrationByPropertyName(System.String)">
            <summary>
            Attempts to locate a frozen property registration by property name and throws an exception if one was not found
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.TryGetFrozenPropertyRegistrationByPropertyName(System.String)">
            <summary>
            Attempts to locate a frozen property registration by property name.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.TryLocateRelationshipThrowWhenMultipleAreFound(System.Type,System.Nullable{Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType},System.String[],System.String[],System.ComponentModel.PropertyDescriptor)">
            <summary>
            Tries to locate an entity relationship.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.EnsureMappingsFrozen">
            <summary>
            Freezes changes to the property mappings.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRegistration.ValidateState">
            <summary>
            Throws an exception if entity mappings cannot be changed.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipRegistration">
            <summary>
            Holds information about the relationship between two entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipRegistration.#ctor(Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType,System.Type,System.String[],System.String[],System.ComponentModel.PropertyDescriptor)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipRegistration.RelationshipType">
            <summary>
            Type of relationship.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipRegistration.ReferencedEntity">
            <summary>
            The referenced entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipRegistration.ReferencingColumnProperties">
            <summary>
            The property or properties on the current entity involved in referencing the other entity.
            This property is valid for <see cref="F:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType.ChildToParent"/> relationships.
            This property is NOT valid for <see cref="F:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType.ParentToChildren"/> relationship.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipRegistration.ReferencedColumnProperties">
            <summary>
            The property or properties on the referenced entity involved in referencing the current entity.
            This property is valid for <see cref="F:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType.ParentToChildren"/> relationships.
            This property is NOT valid for <see cref="F:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType.ChildToParent"/> relationship.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipRegistration.ReferencingNavigationProperty">
            <summary>
            The property on the current entity referencing the other entity.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType">
            <summary>
            Type of relationship between two entities.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType.ChildToParent">
            <summary>
            A child-to-parent relationship.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.Mappings.Registrations.EntityRelationshipType.ParentToChildren">
            <summary>
            A parent-to-children relationship.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration">
            <summary>
            Holds mapping information for a property.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.#ctor(Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.EntityMapping">
            <summary>
            Gets the entity mapping this property mapping is attached to.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.IsPrimaryKey">
            <summary>
            Gets or sets a flag indicating the property is mapped to a primary key.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.IsRefreshedOnInserts">
            <summary>
            Gets or sets a flag indicating the property is refreshed after an INSERT.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.IsRefreshedOnUpdates">
            <summary>
            Gets or sets a flag indicating the property is refreshed after an UPDATE.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.IsExcludedFromInserts">
            <summary>
            Gets or sets a flag that indicates the curent property will be excluded from updates.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.IsExcludedFromUpdates">
            <summary>
            Gets or sets a flag that indicates the curent property will be excluded from updates.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.DatabaseColumnName">
            <summary>
            Gets or sets the database column name.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.Descriptor">
            <summary>
            Gets the property descriptor of the property attached to the entity type.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.Options">
            <summary>
            Gets or sets the full set of options.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.ColumnOrder">
            <summary>
            Gets or sets the column order, normally used for matching foreign keys with the primary composite keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.Equals(Dapper.FastCrud.Mappings.Registrations.PropertyRegistration)">
            <summary>
            Checks if two property mappings are equal.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.op_Equality(Dapper.FastCrud.Mappings.Registrations.PropertyRegistration,Dapper.FastCrud.Mappings.Registrations.PropertyRegistration)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Mappings.Registrations.PropertyRegistration.op_Inequality(Dapper.FastCrud.Mappings.Registrations.PropertyRegistration,Dapper.FastCrud.Mappings.Registrations.PropertyRegistration)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.DatabaseGeneratedDefaultValueAttribute">
            <summary>
            Denotes that a column has a default value assigned by the database.
            Properties marked with this attributes will be ignored on INSERT but refreshed from the database.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlBuilders.RelationshipOrderComparer">
            <summary>
            Comparer for the optional order used in relationships. (e.g. 1 2 NULL NULL)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.RelationshipOrderComparer.Compare(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.
            Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.
            Zero<paramref name="x" /> equals <paramref name="y" />.
            Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
            
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="T:Dapper.FastCrud.SqlBuilders.Dialects.MsSqlBuilder">
            <summary>
            Statement builder for the <seealso cref="F:Dapper.FastCrud.SqlDialect.MsSql"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.MsSqlBuilder.ConstructFullInsertStatementInternal">
            <summary>
            Constructs a full insert statement
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.MsSqlBuilder.ConstructFullSingleUpdateStatementInternal">
            <summary>
            Constructs an update statement for a single entity.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlBuilders.Dialects.MySqlBuilder">
            <summary>
            Statement builder for the <seealso cref="F:Dapper.FastCrud.SqlDialect.MySql"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.MySqlBuilder.ConstructFullInsertStatementInternal">
            <summary>
            Constructs a full insert statement
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlBuilders.Dialects.PostgreSqlBuilder">
            <summary>
            Statement builder for the <seealso cref="F:Dapper.FastCrud.SqlDialect.PostgreSql"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.PostgreSqlBuilder.ConstructFullInsertStatementInternal">
            <summary>
            Constructs a full insert statement
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlBuilders.Dialects.SqlAnywhereSqlBuilder">
            <summary>
            Statement builder for the <seealso cref="F:Dapper.FastCrud.SqlDialect.SqlAnywhere"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.SqlAnywhereSqlBuilder.ConstructFullInsertStatementInternal">
            <summary>
            Constructs a full insert statement
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.SqlAnywhereSqlBuilder.ConstructFullSingleUpdateStatementInternal">
            <summary>
            Constructs an update statement for a single entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.SqlAnywhereSqlBuilder.ConstructFullSelectStatementInternal(System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Constructs a full select statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlBuilders.Dialects.SqLiteBuilder">
            <summary>
            Statement builder for the <seealso cref="F:Dapper.FastCrud.SqlDialect.SqLite"/>.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.Dialects.SqLiteBuilder.ConstructFullInsertStatementInternal">
            <summary>
            Constructs a full insert statement
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.EntityDescriptor">
            <summary>
            The entity descriptor the current instance of sql builder was created for.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.EntityRegistration">
            <summary>
            The entity registration the current instance of sql builder was created for.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.SelectProperties">
            <summary>
            All the properties that participate in selects.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.KeyProperties">
            <summary>
            All the primary key properties.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.InsertProperties">
            <summary>
            All the properties that participate in inserts.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.UpdateProperties">
            <summary>
            All the properties that participate in updates.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.InsertKeyDatabaseGeneratedProperties">
            <summary>
            Primary key properties that are generated on inserts.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.RefreshOnInsertProperties">
            <summary>
            Properties that require to be updated on inserts.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.RefreshOnUpdateProperties">
            <summary>
            Properties that require to be updated on updates.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.IdentifierStartDelimiter">
            <summary>
            Delimiter to be used at the start of identifiers (e.g. [UserTable])
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.IdentifierEndDelimiter">
            <summary>
            Delimiter to be used at the end of identifiers (e.g. [UserTable])
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.UsesSchemaForTableNames">
            <summary>
            If true, schema qualified table names should be used.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ParameterPrefix">
            <summary>
            The prefix that needs to be used for sql parameters (e.g. @UserId)
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ParameterSuffix">
            <summary>
            The suffix that needs to be used for sql parameters (e.g. ?UserId?)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetPrefixedParameter(System.String)">
            <summary>
            Returns a SQL parameter, prefixed as set in the database dialect options.
            <param name="parameterName">The name of the parameter. It is recommended to use nameof.</param>
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetTableName(System.String,System.Boolean)">
            <summary>
            Returns the table name associated with the current entity.
            </summary>
            <param name="tableAlias">Optional table alias.</param>
            <param name="normalizeAlias">If set, table AS alias is returned.</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetColumnName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Returns the name of the database column attached to the specified property.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetColumnNameForSelect(System.String,System.String)">
            <summary>
            Returns the name of the database column attached to the specified property.
            If the column name differs from the name of the property, this method will normalize the name (e.g. will return 'tableAlias.colName AS propName')
              so that the deserialization performed by Dapper would succeed.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetColumnName(System.String,System.String)">
            <summary>
            Returns the name of the database column attached to the specified property.
            </summary>
            <param name="propertyName">Name of the property</param>
            <param name="tableAlias">Table alias</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetColumnName(Dapper.FastCrud.Mappings.Registrations.PropertyRegistration,System.String,System.Boolean)">
            <summary>
            Resolves a column name
            </summary>
            <param name="propMapping">Property mapping</param>
            <param name="tableAlias">Table alias</param>
            <param name="performColumnAliasNormalization">If true and the database column name differs from the property name, an AS clause will be added</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructKeysWhereClause(System.String)">
            <summary>
            Constructs a condition of form <code>ColumnName=@PropertyName and ...</code> with all the key columns (e.g. <code>Id=@Id and EmployeeId=@EmployeeId</code>)
            </summary>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructKeyColumnEnumeration(System.String)">
            <summary>
            Constructs an enumeration of the key values.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructColumnEnumerationForSelect(System.String)">
            <summary>
            Constructs an enumeration of all the selectable columns (i.e. all the columns corresponding to entity properties which are not part of a relationship).
            (e.g. Id, HouseNo, AptNo)
            </summary>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructColumnEnumerationForSelect(System.String,Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin[])">
            <summary>
            Constructs an enumeration of all the selectable columns, including the ones of the entities participating in JOINs.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructColumnEnumerationForInsert">
            <summary>
            Constructs an enumeration of all the columns available for insert.
            (e.g. HouseNo, AptNo)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructParamEnumerationForInsert">
            <summary>
            Constructs an enumeration of all the parameters denoting properties that are bound to columns available for insert.
            (e.g. @HouseNo, @AptNo)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructUpdateClause(System.String)">
            <summary>
            Constructs a update clause of form <code>ColumnName=@PropertyName, ...</code> with all the updateable columns (e.g. <code>EmployeeId=@EmployeeId,DeskNo=@DeskNo</code>)
            </summary>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullInsertStatement">
            <summary>
            Constructs an insert statement for a single entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullSingleUpdateStatement">
            <summary>
            Constructs an update statement for a single entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullBatchUpdateStatement(System.String)">
            <summary>
            Constructs a batch select statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullSingleDeleteStatement">
            <summary>
            Constructs a delete statement for a single entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullBatchDeleteStatement(System.String)">
            <summary>
            Constructs a batch delete statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructCountSelectClause">
            <summary>
            Constructs the count part of the select statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullCountStatement(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Constructs a full count statement, optionally with a where clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullSingleSelectStatement">
            <summary>
            Constructs a select statement for a single entity
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullBatchSelectStatement(System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Constructs a batch select statement
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.Format(System.FormattableString)">
            <summary>
            Produces a formatted string from a formattable string.
            Table and column names will be resolved, and identifier will be properly delimited.
            </summary>
            <param name="rawSql">The raw sql to format</param>
            <returns>Properly formatted SQL statement</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetDelimitedIdentifier(System.String)">
            <summary>
            Returns a delimited SQL identifier.
            </summary>
            <param name="sqlIdentifier">Delimited or non-delimited SQL identifier</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructSplitOnExpression(Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin[])">
            <summary>
            Constructs a split-on expression for a statement containing joins.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructWhereClause(Dapper.FastCrud.Formatters.GenericSqlStatementFormatter,System.FormattableString,Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin[])">
            <summary>
            Returns a WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructOrderClause(Dapper.FastCrud.Formatters.GenericSqlStatementFormatter,System.FormattableString,Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin[])">
            <summary>
            Returns an ORDER BY clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFromClause(Dapper.FastCrud.Formatters.GenericSqlStatementFormatter,System.String,Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin[])">
            <summary>
            Returns a FROM clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructColumnEnumerationForSelectInternal(System.String,Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin[])">
            <summary>
            Constructs an enumeration of all the selectable columns.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ResolveSqlJoinType(Dapper.FastCrud.Configuration.StatementOptions.SqlJoinType)">
            <summary>
            Resolves a SQL join type.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.GetTableNameInternal(System.String)">
            <summary>
            Returns the table name associated with the current entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructKeysWhereClauseInternal(System.String)">
            <summary>
            Constructs a condition of form <code>ColumnName=@PropertyName and ...</code> with all the key columns (e.g. <code>Id=@Id and EmployeeId=@EmployeeId</code>)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructRefreshOnUpdateColumnSelection">
            <summary>
            Constructs a column selection of all columns to be refreshed on update of the form <code>@PropertyName1,@PropertyName2...</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructRefreshOnInsertColumnSelection">
            <summary>
            Constructs a column selection of all columns to be refreshed on insert of the form <code>@PropertyName1,@PropertyName2...</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructKeyColumnEnumerationInternal(System.String)">
            <summary>
            Constructs an enumeration of the key values.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructColumnEnumerationForInsertInternal">
            <summary>
            Constructs an enumeration of all the columns available for insert.
            (e.g. HouseNo, AptNo)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructParamEnumerationForInsertInternal">
            <summary>
            Constructs an enumeration of all the parameters denoting properties that are bound to columns available for insert.
            (e.g. @HouseNo, @AptNo)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructUpdateClauseInternal(System.String)">
            <summary>
            Constructs a update clause of form <code>ColumnName=@PropertyName, ...</code> with all the updateable columns (e.g. <code>EmployeeId=@EmployeeId,DeskNo=@DeskNo</code>)
            </summary>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullInsertStatementInternal">
            <summary>
            Constructs a full insert statement
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullSingleUpdateStatementInternal">
            <summary>
            Constructs an update statement for a single entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullBatchUpdateStatementInternal(System.String)">
            <summary>
            Constructs a batch select statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullSingleDeleteStatementInternal">
            <summary>
            Constructs a delete statement for a single entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullBatchDeleteStatementInternal(System.String)">
            <summary>
            Constructs a batch delete statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullCountStatementInternal(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Constructs a full count statement, optionally with a where clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullSingleSelectStatementInternal">
            <summary>
            Constructs a select statement for a single entity
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder.ConstructFullSelectStatementInternal(System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Constructs a full select statement.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Sql">
            <summary>
            This SQL builder can be used for mapping table and column names to their SQL counterparts.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Parameter(System.String)">
            <summary>
            Returns a formattable SQL parameter.
            When used with the FastCrud's formatter, it defaults to the "P" specifier (e.g. @Param).
            When used with any other formatter, it defaults to the raw parameter name
              but the "P" specifier is still available in this mode.
            </summary>
            <param name="sqlParameterName">A SQL parameter name. It is recommended to be passed as nameof(params.Param).</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Identifier(System.String)">
            <summary>
            Returns a formattable SQL identifier.
            When used with the FastCrud's formatter, it defaults to the "I" specifier (e.g. [Identifier]).
            When used with any other formatter, it defaults to the raw identifier but the "I" specifier is still available in this mode.
            Do not use this method for table or column names.
            </summary>
            <param name="sqlIdentifier">An SQL identifier that is not a table or a column name. It is recommended to be passed using nameof.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Entity``1(System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns a formattable database entity.
            When used with the FastCrud's formatter, it has no default but responds to the "T" specifier for table or alias.
            When used with any other formatter, it defaults to the raw alias (if provided) or the table name associated with the entity
              but the "T" specifier is still available in this mode as well.
            </summary>
            <param name="alias">An alias to be used instead of the table name.</param>
            <param name="entityMappingOverride">An optional override to the default entity mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Entity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns a formattable property of a database entity.
            When used with the FastCrud's formatter, it has no default but responds to
              the "T" specifier for table or alias or
              the "C" specifier for the single column name or
              the "TC" specifier for a fully qualified SQL column.
              the alias notation
            When used with any other formatter, it defaults to the raw column name associated with the provided property
              but the "C", "T" and "TC" specifiers, together with the alias notation, still work in this mode.
            </summary>
            <param name="alias">An alias to be used instead of the table name.</param>
            <param name="entityMappingOverride">An optional override to the default entity mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Table``1(System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns a formattable database table associated with an entity.
            For consistency, it is recommended to use <see cref="M:Dapper.FastCrud.Sql.Entity``1(System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})"/> instead.
            Irrespective of the formatter used, it defaults to the "T" specifier for table or alias.
            </summary>
            <param name="alias">An alias to be used instead of the table name.</param>
            <param name="entityMappingOverride">An optional override to the default entity mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Column``1(System.String,System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns a formattable database column associated with a property.
            For consistency, it is recommended to use <see cref="M:Dapper.FastCrud.Sql.Entity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})"/> instead.
            Irrespective of the formatter used, it defaults to the "C" specifier, however when using with the FastCrud's formatter it also responds to 
              the "T" specifier for table or alias or
              the "TC" specifier for a fully qualified SQL column.
            </summary>
            <param name="alias">An alias to be used instead of the table name.</param>
            <param name="propertyName">The name of the property. It is recommended to use nameof to provide this value.</param>
            <param name="entityMappingOverride">An optional override to the default entity mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Column``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns a formattable database column associated with a property.
            For consistency, it is recommended to use <see cref="M:Dapper.FastCrud.Sql.Entity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})"/> instead.
            Irrespective of the formatter used, it defaults to the "C" specifier, however when using with the FastCrud's formatter it also responds to 
              the "T" specifier for table or alias or
              the "TC" specifier for a fully qualified SQL column.
            </summary>
            <param name="alias">An alias to be used instead of the table name.</param>
            <param name="property">The property of the entity mapped to a column.</param>
            <param name="entityMappingOverride">An optional override to the default entity mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.TableAndColumn``1(System.String,System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns a fully qualified formattable database column associated with a property.
            For consistency, it is recommended to use <see cref="M:Dapper.FastCrud.Sql.Entity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})"/> instead.
            Irrespective of the formatter used, it defaults to the "TC" specifier, however when using with the FastCrud's formatter it also responds to 
              the "T" specifier for table or alias or
              the "C" specifier for a single column.
            </summary>
            <param name="alias">An alias to be used instead of the table name.</param>
            <param name="propertyName">The name of the property. It is recommended to use nameof to provide this value.</param>
            <param name="entityMappingOverride">An optional override to the default entity mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.TableAndColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Returns a fully qualified formattable database column associated with a property.
            For consistency, it is recommended to use <see cref="M:Dapper.FastCrud.Sql.Entity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Dapper.FastCrud.Mappings.EntityMapping{``0})"/> instead.
            Irrespective of the formatter used, it defaults to the "TC" specifier, however when using with the FastCrud's formatter it also responds to 
              the "T" specifier for table or alias or
              the "C" specifier for a single column.
            </summary>
            <param name="alias">An alias to be used instead of the table name.</param>
            <param name="property">The property of the entity mapped to a column.</param>
            <param name="entityMappingOverride">An optional override to the default entity mapping.</param>
        </member>
        <member name="M:Dapper.FastCrud.Sql.Format``1(System.FormattableString,Dapper.FastCrud.Mappings.EntityMapping{``0})">
            <summary>
            Formats a formattable string, using the provided entity as the main entity resolver.
            </summary>
            <param name="stringToFormat">The formattable string to format.</param>
            <param name="entityMappingOverride">An optional entity mapping override, if different than the default one.</param>
        </member>
        <member name="T:Dapper.FastCrud.ISqlBuilder">
            <summary>
            The SQL builder is useful for creating verbatim SQL queries.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.GetPrefixedParameter(System.String)">
            <summary>
            Returns a SQL parameter, prefixed as set in the database dialect options.
            <param name="parameterName">The name of the parameter. It is recommended to use nameof.</param>
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.GetDelimitedIdentifier(System.String)">
            <summary>
            Returns a delimited SQL identifier.
            </summary>
            <param name="sqlIdentifier">Non-delimited SQL identifier</param>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.GetTableName(System.String,System.Boolean)">
            <summary>
            Returns the table name associated with the current entity. This can include the schema name and database name, if both were provided and enabled.
            </summary>
            <param name="tableAlias">Optional table alias. If normalizeAlias is set, it will return an AS expression.</param>
            <param name="normalizeAlias">If true, an AS expression is returned.</param>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.GetColumnName(System.String,System.String)">
            <summary>
            Returns the name of the database column attached to the specified property.
            Please use <code>nameof(entity.propname)</code> if available, alternatively use the other overload for this method.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.GetColumnNameForSelect(System.String,System.String)">
            <summary>
            Returns the name of the database column attached to the specified property.
            If the column name differs from the name of the property, this method will normalize the name (e.g. will return 'tableAlias.colName AS propName')
              so that the deserialization performed by Dapper would succeed.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.GetColumnName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Returns the name of the database column attached to the specified property.
            Please use <code>nameof(entity.propname)</code> if available, alternatively use the other overload for this method.
            </summary>
            <param name="property">Property for which you want to get the column name.</param>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.ConstructKeysWhereClause(System.String)">
            <summary>
            Constructs a condition of form <code>ColumnName=@PropertyName and ...</code> with all the key columns (e.g. <code>Id=@Id and EmployeeId=@EmployeeId</code>)
            </summary>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.ConstructColumnEnumerationForSelect(System.String)">
            <summary>
            Constructs an enumeration of all the selectable columns (i.e. all the columns corresponding to entity properties which are not part of a relationship).
            (e.g. Id, HouseNo, AptNo)
            </summary>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.ConstructColumnEnumerationForInsert">
            <summary>
            Constructs an enumeration of all the columns available for insert.
            (e.g. HouseNo, AptNo)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.ConstructParamEnumerationForInsert">
            <summary>
            Constructs an enumeration of all the parameters denoting properties that are bound to columns available for insert.
            (e.g. @HouseNo, @AptNo)
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.ConstructUpdateClause(System.String)">
            <summary>
            Constructs a update clause of form <code>ColumnName=@PropertyName, ...</code> with all the updateable columns (e.g. <code>EmployeeId=@EmployeeId,DeskNo=@DeskNo</code>)
            </summary>
            <param name="tableAlias">Optional table alias.</param>
        </member>
        <member name="M:Dapper.FastCrud.ISqlBuilder.Format(System.FormattableString)">
            <summary>
            Produces a formatted string from a formattable string.
            Table and column names will be resolved, and identifier will be properly delimited.
            </summary>
            <param name="rawSql">The raw sql to format</param>
            <returns>Properly formatted SQL statement</returns>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1">
            <summary>
            Holds the main statement implementations.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.#ctor(Dapper.FastCrud.SqlBuilders.GenericStatementSqlBuilder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.SqlBuilder">
            <summary>
            Gets the SQL builder.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.SelectById(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a SELECT operation on a single entity, using its keys
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.SelectByIdAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an async SELECT operation on a single entity, using its keys
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.Insert(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an INSERT operation
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.InsertAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an INSERT operation
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.UpdateById(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE opration on an entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.UpdateByIdAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE opration on an entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.BulkUpdate(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE operation on multiple entities identified by an optional WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.BulkUpdateAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE operation on multiple entities identified by an optional WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.DeleteById(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation on a single entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.DeleteByIdAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation on a single entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.BulkDelete(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation using a WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.BulkDeleteAsync(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation using a WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.Count(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a COUNT on a range of items.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.CountAsync(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a COUNT on a range of items.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.BatchSelect(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a common SELECT 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1.BatchSelectAsync(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a common SELECT 
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.ISqlStatements`1">
            <summary>
            SQL statement factory.
            </summary>
            <typeparam name="TEntity">Target entity type</typeparam>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.SelectById(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a SELECT operation on a single entity, using its keys
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.SelectByIdAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a SELECT operation on a single entity, using its keys
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.Insert(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an INSERT operation
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.InsertAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an INSERT operation
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.UpdateById(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE operation on an entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.UpdateByIdAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE operation on an entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.BulkUpdate(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE operation on multiple entities identified by an optional WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.BulkUpdateAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs an UPDATE operation on multiple entities identified by an optional WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.DeleteById(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation on a single entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.DeleteByIdAsync(System.Data.IDbConnection,`0,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation on a single entity identified by its keys.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.BulkDelete(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation using a WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.BulkDeleteAsync(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a DELETE operation using a WHERE clause.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.Count(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a COUNT on a range of items.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.CountAsync(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a COUNT on a range of items.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.BatchSelect(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a common SELECT 
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.ISqlStatements`1.BatchSelectAsync(System.Data.IDbConnection,Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlStatementOptions)">
            <summary>
            Performs a common SELECT 
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.BasicResultSetParser">
            <summary>
            A result set parser stage is responsible for handling setting up values on an entity
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.BasicResultSetParser.#ctor(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityContainer)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.BasicResultSetParser.SharedContainer">
            <summary>
            The global shared entity container.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.BasicResultSetParser.RegisterContinuation(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.BasicResultSetParser)">
            <summary>
            Adds a new stage as a continuation of the current one.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.BasicResultSetParser.Execute(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper[])">
            <summary>
            Executes the stage using an entity instance as input and the original entity row as a reference.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.BasicResultSetParser.ProduceNextInstance(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper[])">
            <summary>
            Executes the current stage and produces the next instance.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityContainer">
            <summary>
            Global entity container
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityContainer.Item(System.Type)">
            <summary>
            Gets or creates a new entity container.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper">
            <summary>
            Represents an unknown entity instance, as retrieved by executing the statement.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.#ctor(Dapper.FastCrud.Mappings.Registrations.EntityRegistration,System.Object)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.EntityRegistration">
            <summary>
            Gets the property registration attached to the instance.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.EntityInstance">
            <summary>
            Gets the underlying instance.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.Equals(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.op_Equality(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper)">
            <summary>Returns a value that indicates whether the values of two <see cref="T:Dapper.FastCrud.SqlStatements.MultiEntity.RelationshipEntityInstance" /> objects are equal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper.op_Inequality(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper)">
            <summary>Returns a value that indicates whether two <see cref="T:Dapper.FastCrud.SqlStatements.MultiEntity.RelationshipEntityInstance" /> objects have different values.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer">
            <summary>
            Holds unique entities of a specific type.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.EntityType">
            <summary>
            The entity type the container refers to.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.GetOrRegisterGlobally(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper)">
            <summary>
            Gets or adds an entity to the global unique collection of entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.GetOrAddToLocalCollection(System.Object,System.ComponentModel.PropertyDescriptor,System.Collections.IList,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper)">
            <summary>
            Adds a new unique entity to a list of entities or returns an existing entity.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey.#ctor(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey.Equals(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey.op_Equality(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey)">
            <summary>Returns a value that indicates whether the values of two <see cref="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityContainer.LocalEntityCollectionKey" /> objects are equal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey.op_Inequality(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.TypedEntityContainer.LocalEntityCollectionKey)">
            <summary>Returns a value that indicates whether two <see cref="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityContainer.LocalEntityCollectionKey" /> objects have different values.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.DataRowEntityResultParser">
            <summary>
            A result set parser made up of multiple multiple result sets
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.DataRowEntityResultParser.#ctor(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityContainer,System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.DataRowEntityResultParser.ProduceNextInstance(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper[])">
            <summary>
            Executes the current stage and produces the next instance.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.EntityPropertyResultSetParser">
            <summary>
            A result set that sets up a collection.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.EntityPropertyResultSetParser.#ctor(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityContainer,Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship,System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.EntityPropertyResultSetParser.ProduceNextInstance(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper[])">
            <summary>
            Executes the current stage and produces the next instance.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.MainEntityResultSetParser`1">
            <summary>
            The main entry into the parser stages.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.MainEntityResultSetParser`1.#ctor(Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin[])">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.MainEntityResultSetParser`1.MainEntityCollection">
            <summary>
            Returns the parsed collection of main entities.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.MainEntityResultSetParser`1.ProduceNextInstance(Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper,Dapper.FastCrud.SqlStatements.MultiEntity.ResultSetParsers.Containers.EntityInstanceWrapper[])">
            <summary>
            Executes the current stage and produces the next instance.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin">
            <summary>
            This is mainly used by <seealso cref="T:Dapper.FastCrud.SqlStatements.GenericSqlStatements`1"/> class to
              analyze the join options passed in via <seealso cref="T:Dapper.FastCrud.Configuration.StatementOptions.Aggregated.AggregatedSqlJoinOptions"/>
              and entities having the information stored in <seealso cref="T:Dapper.FastCrud.Formatters.GenericSqlStatementFormatter"/> for the duration of the request.
            The analysis goes all the way to identify even the individual columns used in joining two entities.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.ReferencedEntityFormatterResolver">
            <summary>
            Gets the formatter resolver for the referenced entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.ReferencedEntityDescriptor">
            <summary>
            Gets the referenced entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.ReferencedEntityRegistration">
            <summary>
            Gets the referenced entity registration.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.ReferencedEntitySqlBuilder">
            <summary>
            Gets the SQL builder attached to the referenced entity.
            </summary>
        </member>
        <member name="F:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.ResolvedRelationships">
            <summary>
            Returns the resolved relationships.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.RequiresResultMapping">
            <summary>
            Returns true if any of the relationships require result mapping.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.JoinOnClause">
            <summary>
            The JOIN ON clause. This overrides any relationship that was located through the entity relationship registrations.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.JoinExtraWhereClause">
            <summary>
            The WHERE clause attached to the join, in addition to the main WHERE clause. This is now deprecated.
            The where condition is forced to resolve single column formatter specifiers with the associated table or alias.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.JoinExtraOrderByClause">
            <summary>
            The ORDER BY clause attached to the join. This is now deprecated.
            The where condition is forced to resolve single column formatter specifiers with the associated table or alias.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoin.JoinType">
            <summary>
            The type of JOIN requested
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship">
            <summary>
            Holds resolved information about a SQL join relationship.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.#ctor(Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver,System.ComponentModel.PropertyDescriptor,Dapper.FastCrud.Mappings.Registrations.PropertyRegistration[],Dapper.FastCrud.Formatters.Contexts.SqlStatementFormatterResolver,System.ComponentModel.PropertyDescriptor,Dapper.FastCrud.Mappings.Registrations.PropertyRegistration[],System.Boolean)">
            <summary>
            Constructor taking a set of options related to a relationship.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.MapResults">
            <summary>
            If true, the map results should be set in <see cref="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingNavigationProperty"/> and <see cref="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedNavigationProperty"/>, if available.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingEntityDescriptor">
            <summary>
            Holds the entity descriptor for the referencing entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedEntityDescriptor">
            <summary>
            Holds the entity descriptor for the referenced entity descriptor.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingEntityFormatterResolver">
            <summary>
            Holds the SQL Formatter for the referencing entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedEntityFormatterResolver">
            <summary>
            Holds the SQL Formatter for the referenced entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingEntityRegistration">
            <summary>
            Holds the entity registration for the referencing entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedEntityRegistration">
            <summary>
            Holds the entity registration for the referenced entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingEntityAlias">
            <summary>
            Holds the entity alias for the referencing entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedEntityAlias">
            <summary>
            Holds the entity alias for the referenced entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingEntitySqlBuilder">
            <summary>
            Holds the SQL builder responsible for the referencing entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedEntitySqlBuilder">
            <summary>
            Holds the SQL builder responsible for the referencing entity.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingNavigationProperty">
            <summary>
            If a matching referencing-&lt;referenced relationship has been located from the entity registrations,
            this holds the navigation property the relationship was set with.
            Note that this is an optional feature when defining a relationship.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingNavigationPropertyIsCollection">
            <summary>
            Returns true if the navigation property on the referencing property is a collection.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedNavigationProperty">
            <summary>
            If a matching referenced-&lt;referencing relationship has been located from the entity registrations,
            this holds the navigation property the relationship was set with.
            Note that this is an optional feature when defining a relationship.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedNavigationPropertyIsCollection">
            <summary>
            Returns true if the navigation property on the referenced property is a collection.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencingColumnProperties">
            <summary>
            If a matching relationship has been located from the entity registrations,
            this holds the properties representing the columns on the referencing entity that are used to JOIN the two entities.
            </summary>
        </member>
        <member name="P:Dapper.FastCrud.SqlStatements.MultiEntity.SqlStatementJoinRelationship.ReferencedColumnProperties">
            <summary>
            If a matching relationship has been located from the entity registrations,
            this holds the properties representing the columns on the referenced entity that are used to JOIN the two entities.
            </summary>
        </member>
        <member name="T:Dapper.FastCrud.Validations.Validate">
            <summary>
            Common runtime checks that throw ArgumentExceptions upon failure.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotDefault``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is the default.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>default</c></exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotNull``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null or empty.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null, empty, or whitespace.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null or has no elements.
            </summary>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotNullOrEmptyOrNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements or has an element with a null value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.NotNullOrNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements or has an element with a null value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.Range(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.Argument(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentException if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.ValidState(System.Boolean,System.String)">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.InvalidOperationException"/>.</param>
            <param name="message">The message to include with the exception.</param>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.DirectoryExists(System.String,System.String)">
            <summary>
            Checks whether a directory exists on the disk.
            </summary>
            <param name="directoryPath">Path of the directory</param>
            <param name="parameterName">Name of the parameter</param>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.PathIsRooted(System.String,System.String,System.String)">
            <summary>
            Checks whether a path is rooted and is a subfolder of the base directory.
            </summary>
            <param name="path">Path of the file</param>
            <param name="baseDirectory">The folder the path must be rooted in</param>
            <param name="parameterName">Name of the parameter</param>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.TargetIsType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.FileExists(System.String,System.String)">
            <summary>
            Checks whether a file exists on the disk.
            </summary>
            <param name="filePath">Path of the file</param>
            <param name="parameterName">Name of the parameter</param>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.FileNotFound(System.String,System.String)">
            <summary>
            Checks whether a file does not exist on the disk.
            </summary>
            <param name="filePath">Path of the file</param>
            <param name="parameterName">Name of the parameter</param>
        </member>
        <member name="M:Dapper.FastCrud.Validations.Validate.FailRange(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
            <returns>Nothing.  This method always throws.</returns>
        </member>
    </members>
</doc>
